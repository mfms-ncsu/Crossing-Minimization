#! /bin/bash

## createRandomClass - a script for creating a class of random dags for which
# both the variance in layer width and the variance in degree can be
# carefully controlled. The latter may require some experimentation using the
# imported createRandomLayeredGraph.py script.
#
# IMPORTS:
#   - createRandomLayeredGraph.py in this directory
#   - sgf2dot+ord in this directory
#   - sgf2dot.awk in this directory
#   - sgf2ord.awk in this directory
#   - randomizeClass in this directory [not using this yet; no reason to
#                                       suspect bias]
#   - scramble_dot and scramble_ord in ../instance-generation
#
# @author Matt Stallmann
# @date 2011/06/05
# $Id: createRandomClass 107 2015-04-20 19:00:18Z mfms $

size=32

if [ $# != 7 ]; then
    echo "Usage: createRandomClass"\
          "TARGET_ROOT_DIRECTORY BASE_NAME NODES EDGES LAYERS WIDTH_VAR DEGREE_VAR"
    echo " TARGET_ROOT_DIRECTORY is the parent directory for the random class directory"
    echo "BASE_NAME is used to name the directory and the files within it."
    echo " Each new .dot/.ord pair has prefix BASE_NAME-xxx,"
    echo " where xxx is a three-digit sequence number (the seed)."
    echo "NODES, EDGES and LAYERS self-explanatory"
    echo "WIDTH_VAR determines the variance in number of nodes per layer -"
    echo "  0 => all layers have the same number of nodes; last layer may"\
         " have fewer if not evenly divisible"
    echo "  v > 0 => size varies between 3 and (v+1) * average"
    echo "DEGREE_VAR determines the variance in node degree -"
    echo "  0 => degree is balanced as much as possible"
    echo "  1 => nodes have roughly the same probability of acquiring new edges"
    echo "  > 1 => there will be a bias toward adding edges to higher degree nodes"
    echo "Note: creates a file called BASE_NAME-stats.out in the class directory"
    echo " and a z_creation_stats.out file with output produced during generation."
    echo "Also leaves an .sgf file for each dot/ord pair in the class directory"
    exit 1
fi

script_directory=${0%/*}
creation_script=$script_directory/createRandomLayeredGraph.py
conversion_script=$script_directory/sgf2dot+ord
scrambling_script=$script_directory/randomizeClass

target_root_directory=$1
# ensure that target root directory name is fully expanded
pushd $target_root_directory &> /dev/null
target_root_directory=$PWD
popd &> /dev/null

shift
base_name=$1
shift
nodes=$1
shift
edges=$1
shift
layers=$1
shift
width_var=$1
shift
degree_var=$1

echo "nodes, edges, layers = $nodes, $edges, $layers; width_var = $width_var; degree_var = $degree_var"
echo -n "continue [y/n]? "
read answer
if [ $answer != "y" ]; then
    echo "script $0 is terminating."
    exit 1
fi

if [ ! -d $target_root_directory ]; then
    if [ ! -f $target_root_directory ]; then
        mkdir $target_root_directory
    else
        echo "Output directory $target_root_directory exists as a file."
        echo "Cannot proceed with script $0"
        exit 1
    fi
fi
class_dir=$target_root_directory/$base_name
if [ -d $class_dir ]; then
    echo "$class_dir already exists."
    echo -n "Replace it (y/n) [n]? "
    read answer
    if [ $answer != "y" ]; then
        echo "Not replacing directory;"
        echo "script $0 is terminating."
        exit 1
    else
        rm -rf $class_dir
    fi
elif [ -f $class_dir ]; then
    echo "$class_dir is a regular file;"
    echo "will not replace it with a directory."
    exit 1
fi


# get here only if $target_root_directory exists and $class_dir doesn't.
mkdir $class_dir
echo "Creating a class in directory $class_dir"
pushd $class_dir &> /dev/null
stat_file=z_creation_stats.out
index=1
while [[ $index -le $size ]]; do
    instance_base=$base_name-`echo $index | awk '{printf "%03d",$1;}'`
    seed=$index
    echo -n "instance=$instance_base nodes=$nodes edges=$edges layers=$layers"
    echo " width_var=$width_var degree_var=$degree_var seed=$seed"
    echo "----------------- $instance_base ----------------" >> $stat_file

    ($creation_script $nodes $edges $layers $width_var $degree_var $seed > $instance_base.sgf ) >> $stat_file 2>&1
    $conversion_script $instance_base

    echo "_________________________________________________" >> $stat_file
    echo "" >> $stat_file
    index=$(( $index + 1 ))
done

# create a stat file based on running min_crossings in verbose mode
external_stat_file=$base_name-stats.out
stat_program="$script_directory/../src/min_crossings -v -p dfs"
for dot_file in *.dot; do
    ord_file=`basename $dot_file .dot`.ord
    echo "$stat_program $dot_file $ord_file" >> $external_stat_file
    $stat_program $dot_file $ord_file >> $external_stat_file
    echo "_____________________________" >> $external_stat_file
    echo "" >> $external_stat_file
done
popd &> /dev/null

#  [Last modified: 2014 07 24 at 17:09:47 GMT]
