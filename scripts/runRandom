#! /bin/bash
## runRandom - run min_crossings with two heuristics in sequence with
# specific command-line
# arguments for a given number of iterations with different random seeds on a
# specific .dot and .ord file
#
# @author Matt Stallmann
# @date 2014/10/14
# $Id: runRandom 106 2015-04-13 17:01:05Z mfms $

# number of different random seeds to use
NUMBER_OF_INSTANCES=2
PREPROCESSOR=dfs+               # to use in ord file name
FIXED_OPTIONS_1="-p dfs -i 40000 -z"
POSTPROCESSOR=-post             # to use in ord file name
FIXED_OPTIONS_2="-i 40000 -z"

# location of executable relative to the parent directory of the script directory
executable_location=src
if [ $# -ne 6 ]; then
    echo "Usage: $0 DOT_FILE_NAME OUTPUT_DIR HEUR_1 OPTIONS_1 HEUR_2 OPTIONS_2"
    echo " where DOT_FILE_NAME is the name of the .dot file:"
    echo " both it and a corresponding .ord file must exist in the current directory."
    echo "       OUTPUT_DIR is a directory in which the output files should be stored"
    echo "       HEUR_1 and HEUR_2 are two heuristics to be run in sequence"
    echo "       OPTIONS_1 and OPTIONS_2 are the options to be used for each (enclosed in quotes)"
    echo "       The output files created are (BASE is the base name of the .dot file):"
    echo "          BASE-HEUR_1-S.out         = only HEUR_1 is run (randomized)"
    echo "          BASE-HEUR_1-HEUR_2-S_.out = only HEUR_1 is randomized"
    echo "          BASE-HEUR_1-HEUR_2-_S.out = only HEUR_2 is randomized"
    echo "          BASE-HEUR_1-HEUR_2-SS.out = both are randomized"
    echo "          a file BASE-HEUR_1-_ is also created to store result of single deterministic run"
    exit 1
fi

# The path to the executables needs to be absolute to ensure portability of
# the script (can be run from anywhere)
script_directory_parent=${0%/*}
pushd $script_directory_parent > /dev/null
cd ..
executable=$PWD/$executable_location/min_crossings
rand_seq=$PWD/$executable_location/rand_seq
popd > /dev/null

dot_file_name=$1
shift
output_dir=$1
shift
heur_1=$1
shift
options_1=$1
shift
heur_2=$1
shift
options_2=$1

options_1="$FIXED_OPTIONS_1 $options_1"
options_2="$FIXED_OPTIONS_2 $options_2"

if [ ! -d $output_dir ]; then
    if [ ! -f $output_dir ]; then
        mkdir $output_dir
    else
        echo "Output directory $output_dir exists as a file."
        echo "Cannot proceed with script $0"
        exit 1
    fi
fi

# make sure $output_dir is an absolute path so that any change of directory
# below does not affect it
pushd $output_dir
output_dir=$PWD
popd

ord_base=${dot_file_name%.dot}
ord_file_name=${ord_base}.ord
BASE=`basename $dot_file_name .dot`

# copy everything to a temporary directory and run from there
echo "moving files to temporary directory"

temp_dir=/tmp/runRandom_$$
mkdir $temp_dir
cp $dot_file_name $ord_file_name $temp_dir
pushd $temp_dir

# at this point, the dot and ord files have paths relative to $temp_dir,
# i.e., the current directory
dot_file_name=`basename $dot_file_name`
ord_file_name=`basename $ord_file_name`

# initialize all of the output files
for output_base in $BASE-$PREPROCESSOR$heur_1-_ $BASE-$PREPROCESSOR$heur_1-S \
    $BASE-$PREPROCESSOR$heur_1-$heur_2-S_ $BASE-$PREPROCESSOR$heur_1-$heur_2-_S \
    $BASE-$PREPROCESSOR$heur_1-$heur_2-SS; do

    output_file=$output_dir/$output_base.out
    echo "initializing output file $output_file"
    if [ -e $output_file ]; then
        echo "WARNING $output_file already exists,"
        output_file=$output_dir/`basename $output_file .out`_$$.out
        echo "using $output_file instead."
    fi

    # put run info at the top of the output file
    echo "@command runRandom $dot_file_name $output_dir" >> $output_file
    echo "@first_heuristic  $heur_1 $options_1" >> $output_file
    echo "@second_heuristic $heur_2 $options_2" >> $output_file
    echo "@instances $NUMBER_OF_INSTANCES" >> $output_file
    echo "@executable $executable" >> $output_file
    echo ">>>>> output_file = $output_file >>>>>" >> $output_file
    echo "**************** Starting **************" >> $output_file
    echo >> $output_file

    # put system info at the top of the output file
    echo "Host    = $HOSTNAME" >> $output_file
    echo "Machine = $MACHTYPE" >> $output_file
    echo >> $output_file
done

# create .ord file for deterministic run of first heuristic (and store run
# information)
echo
output_file=$output_dir/$BASE-$PREPROCESSOR$heur_1-_.out
echo "  output_file = $output_file"
echo " ==> `date -u +'%F %T'` <==" >> $output_file
echo " --- `basename $executable` $options_1 -o _ $dot_file_name $ord_file_name" >> $output_file
echo >> $output_file
echo " ==> `date -u +'%F %T'` <=="
echo " --- `basename $executable` $options_1 -o _ $dot_file_name $ord_file_name"
echo

$executable -h $heur_1 $options_1 -o _ $dot_file_name $ord_file_name >> $output_file 2>&1

# do random runs in four different combinations for each seed
index=1
while [[ $index -le $NUMBER_OF_INSTANCES ]]; do
    # run first heuristic randomly using a seed based on index, time, and
    # process id; the resulting .ord file will have the form BASE-S-heur_1
    seed=$(( `$rand_seq $index | tail -1` * ($NUMBER_OF_INSTANCES - $index) ))
    output_file=$output_dir/$BASE-$PREPROCESSOR$heur_1-S.out
    echo " ==> `date -u +'%F %T'` <==" >> $output_file
    echo " ==> `date -u +'%F %T'` <=="
    echo "  output_file = $output_file"
    echo " ??? random first heuristic, seed = $seed ???" >> $output_file
    echo " ??? random first heuristic, seed = $seed ???"
    echo " --- `basename $executable` -h $heur_1 $options_1 -o _ -R $seed $dot_file_name $ord_file_name" >> $output_file
    echo " --- `basename $executable` -h $heur_1 $options_1 -o _ -R $seed $dot_file_name $ord_file_name"
    $executable -h $heur_1 $options_1 -o $BASE-S -R $seed $dot_file_name $ord_file_name >> $output_file 2>&1
    echo " ***                                       ***" >> $output_file
    echo " ***                                       ***"
    echo >> $output_file
    echo

    # run second heuristic randomly with initial ordering given by
    # deterministic run of first heuristic.
    seed=$(( `$rand_seq $index | tail -1` * ($NUMBER_OF_INSTANCES - $index) ))
    ord_file=$BASE-$PREPROCESSOR$heur_1.ord
    output_file=$output_dir/$BASE-$PREPROCESSOR$heur_1-$heur_2-_S.out
    echo "  output_file = $output_file"
    echo " ___??? second heuristic random, first deterministic, seed = $seed ___???"
    echo " --- `basename $executable` -h $heur_2 $options_2 -R $seed $dot_file_name $ord_file"
    echo " ___??? second heuristic random, first deterministic, seed = $seed ___???" >> $output_file
    echo " --- `basename $executable` -h $heur_2 $options_2 -R $seed $dot_file_name $ord_file" >> $output_file
    $executable -h $heur_2 $options_2 -R $seed $dot_file_name $ord_file >> $output_file 2>&1   
    echo " ***                                                                ***" >> $output_file
    echo " ***                                                                ***"
    echo >> $output_file
    echo

    # run second heuristic deterministically with initial ordering given by
    # random run of first heuristic.
    ord_file=$BASE-S-$PREPROCESSOR$heur_1$POSTPROCESSOR.ord
    output_file=$output_dir/$BASE-$PREPROCESSOR$heur_1-$heur_2-S_.out
    echo "  output_file = $output_file"
    echo " ???___ second heuristic deterministic, first random, seed = $seed ???___"
    echo " --- `basename $executable` -h $heur_2 $options_2 -R $seed $dot_file_name $ord_file"
    echo " ???___ second heuristic random, first deterministic, seed = $seed ???___" >> $output_file
    echo " --- `basename $executable` -h $heur_2 $options_2 -R $seed $dot_file_name $ord_file" >> $output_file
    $executable -h $heur_2 $options_2 $dot_file_name $ord_file >> $output_file 2>&1     

    echo " ***                                                                ***" >> $output_file
    echo " ***                                                                ***"
    echo >> $output_file
    echo

    # run second heuristic randomly with initial ordering given by random run
    # of first heuristic. Seed is independent of seed used earlier since
    # rand_seq returns a sequence based on seconds and microseconds. The ord
    # file name remains the same because it's based on the same random run of
    # the first heuristic

    seed=$(( `$rand_seq $index | tail -1` * $index ))
    output_file=$output_dir/$BASE-$PREPROCESSOR$heur_1-$heur_2-SS.out
    echo "  output_file = $output_file"
    echo " ?????? second heuristic random, first random, seed = $seed ??????"
    echo " --- `basename $executable` -h $heur_2 $options_2 -R $seed $dot_file_name $ord_file"
    echo " ?????? second heuristic random, first random, seed = $seed ??????" >> $output_file
    echo " --- `basename $executable` -h $heur_2 $options_2 -R $seed $dot_file_name $ord_file" >> $output_file
    $executable -h $heur_2 $options_2 -R $seed $dot_file_name $ord_file >> $output_file 2>&1     

    echo " ***                                                                ***" >> $output_file
    echo " ***                                                                ***"
    echo >> $output_file
    echo

    index=$(( $index + 1 ))
done

popd

#  [Last modified: 2015 01 16 at 20:29:05 GMT]
