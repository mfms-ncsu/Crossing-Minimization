#! /bin/bash

# a variant of followHeuristic in which the second heuristic is randomized

FIRST_HEURISTIC_OPTIONS="-p dfs -z -P s_t"
FIRST_HEURISTIC_ITERATIONS=40000
PREFIX="dfs+"
FIRST_HEURISTIC_SUFFIX=_
SECOND_HEURISTIC_OPTIONS="-z -P s_t"
SECOND_HEURISTIC_ITERATIONS=40000
SECOND_HEURISTIC_SUFFIX=R
OBJECTIVE="stretch"
SECOND_OBJECTIVE=      # in case you want another objective, e.g., bottleneck

if [ $# -lt 4 ]; then
    echo "Usage: $0 class result_dir first_heuristic second_heuristic_1 [second_heuristic_2 ...]"
    echo " runs first_heuristic on the given class"
    echo " and then runs each of the second_heuristic(s) as a follow-on"
    echo " options for first heuristic: $FIRST_HEURISTIC_OPTIONS -i $FIRST_HEURISTIC_ITERATIONS"
    echo " options for second heuristic(s): $SECOND_HEURISTIC_OPTIONS -i $SECOND_HEURISTIC_ITERATIONS"

    exit 1
fi

# The runHeuristic script is in this directory, but this path needs to be
# absolute to ensure portability of the script (can be run from anywhere)
script_directory=${0%/*}
pushd $script_directory > /dev/null
script_directory=$PWD
popd > /dev/null

class=$1
shift
result_dir=$1
shift
heuristic_1=$1
shift
other_heuristics="$@"

# need absolute paths; caution: the script assumes that the given paths are relative
result_dir=$PWD/$result_dir
class=$PWD/$class

# create a class for storing the outputs of the first heuristic and run the
# heuristic with the output option set to use the basename of the dot files
# need to strip off the / first; the new class will be in the same directory
# as the original
new_class=${class%/}-$PREFIX$heuristic_1${FIRST_HEURISTIC_SUFFIX}-$OBJECTIVE

if [ ! -d $new_class ]; then
    if [ ! -f $new_class ]; then
        mkdir $new_class
    else
        echo "Output directory $new_class exists as a file."
        echo "Cannot proceed with script $0"
        exit 1
    fi
fi

pushd $new_class
# start with a clean slate
rm -f *.dot *.ord
$script_directory/runHeuristic $class $result_dir $PREFIX$heuristic_1$FIRST_HEURISTIC_SUFFIX -h $heuristic_1 $FIRST_HEURISTIC_OPTIONS -i $FIRST_HEURISTIC_ITERATIONS -z -o _

# create dot files to go with the created ord files and run each second
# heuristic on the output, i.e., the ordering produced, of the first
cp $class/*.dot .
$script_directory/mvsed -s "s/\.dot/-$PREFIX${heuristic_1}-$OBJECTIVE\.dot/" *.dot

for heuristic in $other_heuristics; do
    $script_directory/runHeuristicR $new_class $result_dir $heuristic$SECOND_HEURISTIC_SUFFIX -h $heuristic $SECOND_HEURISTIC_OPTIONS -i $SECOND_HEURISTIC_ITERATIONS
done

# Now rerun using best bottleneck solution from first heuristic

# get rid of the previous .dot files; needed so that the runHeuristicR for
# the second objective does not also use those created for the first
# objective.
rm -f $new_class/*.dot

# create dot files to go with the second objective ord files and run the second
# heuristic starting with the best result for the second objective after first heuristic 
if [ -n "$SECOND_OBJECTIVE" ]; then
    cp $class/*.dot .
    $script_directory/mvsed -s "s/\.dot/-$PREFIX${heuristic_1}-$SECOND_OBJECTIVE\.dot/" *.dot

    for heuristic in $other_heuristics; do
        $script_directory/runHeuristicR $new_class $result_dir $heuristic${SECOND_HEURISTIC_SUFFIX}-$SECOND_OBJECTIVE -h $heuristic $SECOND_HEURISTIC_OPTIONS -i $SECOND_HEURISTIC_ITERATIONS
    done
fi

popd

# cleanup (may not be desirable if we want to keep intermediate results)
# rm -rf $new_class

#  [Last modified: 2020 12 21 at 16:21:47 GMT]
