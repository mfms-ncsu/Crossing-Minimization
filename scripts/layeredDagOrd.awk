## layeredDagOrd.awk
# Generates the .ord file for a random dag with pre-specified number of nodes
# per layer using the same input format as layeredDag.awk. Since only the
# edges are random, the first line of input is ignored except to generate the
# name of the dag corresponding to the one generated by layeredDag.awk with
# the same input.
#
# Usage: awk -f layeredDagOrd.awk input_file > output_file.ord
#
# FORMAT of input file:
#     name_of_graph edge_prob random_seed
#     layer_zero_num_nodes
#     layer_one_num_nodes
#     ...
#     layer_(k-1)_num_nodes
#
# ---
#
# output_file.ord is in .ord format with node names of the form
#   n_x_y
# where x is the layer and y is the position within the layer.
#
# @author Matt Stallmann
# @date 2008/07/10
#
# $Id: layeredDagOrd.awk 107 2015-04-20 19:00:18Z mfms $

NR == 1 {
  name = $1; edge_probability = $2; random_seed = $3;
  printf "# Natural ordering for layered dag %s\n", name;
  printf "# Created by layeredDagOrd, edge_probability = %f, seed = %d\n",
    edge_probability, random_seed;
  MAX_NODES_PER_LINE = 10;
}

NR > 1 {
  num_nodes = $1;
  printf "\n# Ordering for layer %d\n", current_layer;
  printf "%d {\n", current_layer;

  # print names of all nodes on the current layer with at most
  # MAX_NODES_PER_LINE as given
  for( j = 0; j < num_nodes; j++ )
  {
    if( j > 0 && j % MAX_NODES_PER_LINE == 0 ) printf "\n";
    printf(" n_%d_%d", current_layer, j);
  }
  printf "\n} # end of layer %d\n", current_layer;
  current_layer++;
} # NR > 1

END {
  printf "\n# end of ordering for layered dag %s\n", name;
}

#  [Last modified: 2012 01 06 at 01:54:38 GMT]
